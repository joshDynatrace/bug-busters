{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"1. About","text":"<p>Support Policy</p> <p>This is an enablement project created by the DevRel Team at Dynatrace</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"#dynatrace-bug-buster-bug-finding-expedition","title":"Dynatrace Bug Buster Bug Finding Expedition","text":""},{"location":"#whats-this-bug-finding-tutorial-all-about","title":"What's this bug finding tutorial all about","text":"<p>In this bug finding tutorial it's your job (with a few hints) to find bugs in two applications:</p> <ul> <li>BugZappers - an asteroids style game</li> <li>Todo App - a todo app for keeping track of todo tasks</li> </ul> <p>As part of the tasks you will utilize Dynatraces new Live Debugger.</p> <p>The Live Debugger is a solution within the package of Observability for Developers of the Dynatrace Platform which provides developers with instant access to code-level debug data needed to troubleshoot and understand complex, modern applications with no extra coding, redeployments, or restarts.</p> <p> </p> <p>Are you ready to start the Bug hunting journey?</p> <ul> <li>Yes! let's begin </li> </ul> <p></p> <p>If you need assistance setting up the Dynatrace tenant to run this bug finding exercise with click here (admins only):</p> <ul> <li>Help me setup my tenant </li> </ul>"},{"location":"1-bugzappers-bugs/","title":"4. Bugzappers","text":""},{"location":"1-bugzappers-bugs/#bug-1-play-and-game-and-clear-the-scores","title":"Bug 1: Play and Game and Clear the Scores","text":"<p>There are a few bugs in the Bugzapper app and your mission is to find them by investaging the application and using Dynatrace to help your investigation.</p> <p>Open the bugzappers game in your browser (if its not open, go to the codespaces 'Ports' tab and open the app on port 30200 in your browser)</p> <p>To start, play a game to make sure there are some top scores on the scoreboard:</p> <p></p> <p>Hints</p> <ul> <li>Try to clear the scores from the Top Scores. What do you notice?</li> <li>Try to use the Distributed Tracing App to understand which API calls are being made. Filter on the <code>asteroids-game</code> service. Press 'ctrl/cmd + K' in Dynatrace and type 'Distributed Tracing' to find the app.</li> </ul> <p></p> <ul> <li>Use the Live Debugger to set a breakpoint in the part of the code that's responsible for clearing the scores. Press 'ctrl/cmd + K' in Dynatrace and type 'Live Debugger' to find the app. Click the purple pencil icon to set a Live Debugger filter. Use the <code>bugzapper</code> namespace as the filter. The source code repository should populate automatically. </li> </ul>"},{"location":"1-bugzappers-bugs/#bug-2-view-past-game-stats","title":"Bug 2: View Past Game Stats","text":"<p>Now that you've played a game, you can view your game stats by clicking on the <code>View Game Stats</code> button.</p> <p></p> <p>Now click on <code>Past Game Stats</code> to view the past game stats. What do you notice?</p> <p>Hints</p> <ul> <li>Try to use the Distributed Tracing App to understand which API calls are being made. Filter on the <code>asteroids-game</code> service.</li> <li>Go to the Asteroids Game service in the <code>Services</code> app and check out the Logs. Notice there are some failures. Press 'ctrl/cmd + K' in Dynatrace and type 'Services' to find the app</li> <li>Based on the error logs, use the Live Debugger to set a breakpoint in the part of the code that is responsible for storing the game stats when a game ends.</li> </ul> <p>Did you find the bugs? Great job. Let's move on to the next app.</p> <ul> <li>Let's Find More Bugs in the Todo App</li> </ul>"},{"location":"2-todoapp-bugs/","title":"5. To-do App","text":""},{"location":"2-todoapp-bugs/#bug-1-todo-app-clear-completed","title":"Bug 1: Todo App - Clear Completed","text":"<p>Now that you're an expert bug finder from finding bugs in the Bugzapper game, let's look at another app - the Todo App. There are a few bugs in the app that we'll need to investigate.</p> <ul> <li>Open the Todo app</li> <li>Add a few tasks</li> <li>Complete some of them by clicking to the left of the task</li> <li>Clear the completed tasks</li> </ul> <p>What happens?</p> <p></p> <p>Hints</p> <ul> <li>Open up the distributed traces app to make sure API calls work as expected and understand which calls were made to the backend. Press 'ctrl/cmd + K' in Dynatrace and type 'Distributed Tracing' to find the app.</li> <li>Open the Live Debugger to set a breakpoint in the the function called when you clear Todos. Press 'ctrl/cmd + K' in Dynatrace and type 'Live Debugger' to find the app. Click the purple pencil icon to set a Live Debugger filter. Use the namespace <code>todoapp</code> as your Live Debugger filter.</li> <li>Why are the Todo tasks not getting cleared after looking at the code?</li> </ul>"},{"location":"2-todoapp-bugs/#bug-2-todo-app-clear-completed","title":"Bug 2: Todo App - Clear Completed","text":"<p>Let's add a todo task with some special characters such as exclamation points.</p> <p>What do you notice? Where is the bug?</p> <p></p> <p>Hints</p> <ul> <li>Use the distributed tracing app to filter traces based on the app name, kubernetes namespace, or workload names to see which services are being called. Press 'ctrl/cmd + K' in Dynatrace and type 'Distributed Tracing' to find the app.</li> <li>Use the Live Debugger to set a breakpoint in the part of the code you found to analyze the data. Press 'ctrl/cmd + K' in Dynatrace and type 'Live Debugger' to find the app. Click the purple pencil icon to set a Live Debugger filter. Use the namespace <code>todoapp</code> as your Live Debugger filter.</li> <li>What's happening to the todotitle as it gets added to our list of todos?</li> </ul> <ul> <li>Cleanup</li> </ul>"},{"location":"cleanup/","title":"6. Cleanup","text":"<p>Congratulations on being a top tier bug finder!</p> <p>For admins, below are some tips on cleaning up the enviornment.</p> <p>Deleting the codespace from inside the container</p> <p>We like to make your life easier, for convenience there is a function loaded in the shell of the Codespace for deleting the codespace, just type <code>deleteCodespace</code>. This will trigger the deletion of the codespace.</p> <p>Another way to do this is by going to https://github.com/codespaces and delete the codespace.</p> <p>You may also want to deactivate or delete the API token needed for this lab.</p>"},{"location":"codespaces/","title":"Codespaces","text":""},{"location":"codespaces/#1-launch-codespace","title":"1. Launch Codespace","text":""},{"location":"codespaces/#11-codespaces-configuration","title":"1.1 Codespaces configuration","text":"<p>Branch, Machine sizing &amp; secrets</p> <ul> <li>Branch<ul> <li>select the main branch</li> </ul> </li> <li>Machine sizing<ul> <li>As a machine type select 4-core</li> </ul> </li> <li>Secrets (enter your credentials within the following variables)<ul> <li>DT_TENANT</li> <li>DT_OPERATOR_TOKEN</li> <li>DT_INGEST_TOKEN</li> </ul> </li> </ul>"},{"location":"codespaces/#2-while-the-codespace-is-set-up-for-you-learn-powerful-usecases-for-live-debugging","title":"2. While the Codespace is set-up for you, learn powerful usecases for Live Debugging","text":"<p>We know your time is very valuable. This codespace takes around 6 minutes to be fully operational. A local Kubernetes (kind) cluster monitored by Dynatrace will be configured and in it a sample application, the TODO app will be deployed. To make your experience best, we are also installing and configuring tools like:</p> <p>k9s kubectl helm node jq python3 gh</p> <p>While the Codespace is being set up for you, here is a 6 minute read about powerful use cases beyond live debugging in our Dynatrace blog.</p> <p></p>"},{"location":"codespaces/#3-explore-what-has-been-deployed","title":"3. Explore what has been deployed","text":"<p>Your Codespace has now deployed the following resources:</p> <ul> <li> <p>A local Kubernetes (kind) cluster monitored by Dynatrace, with some pre-deployed apps   that will be used later in the demo.</p> </li> <li> <p>After a couple of minutes, you'll see this screen in your codespaces terminal. It contains the links to the local expose labguide and the UI of the TODO application which we will Live Debug. </p> </li> </ul>"},{"location":"codespaces/#4-tips-tricks","title":"4. Tips &amp; Tricks","text":"<p>We want to boost your learning and try to make your DEV experience as smooth as possible with Dynatrace trainings. Your Codespaces have a couple of convenience features added. </p>"},{"location":"codespaces/#show-the-greeting","title":"Show the greeting","text":"<p>In the terminal, there are functions loaded for your convenience. By creating a new Terminal the Greeting will be shown that includes the links to the exposed apps, the Github  pages, the Github Repository, the Dynatrace Tenant that is bound to this devcontainer and some of the tools installed.</p> <p>You can create a new Terminal directly in VSCode, type <code>zsh</code> or call the function <code>printGreeting</code> and that will print the greeting with the most relevant information.</p>"},{"location":"codespaces/#navigating-in-your-local-kubernetes","title":"Navigating in your local Kubernetes","text":"<p>The client <code>kubectl</code> and <code>k9s</code>are configured so you can navigate in your local Kubernetes like butter.  </p>"},{"location":"codespaces/#exposing-the-apps-to-the-public","title":"Exposing the apps to the public","text":"<p>The app TODO app is being exposed from the devcontainer to your localhost or the github dns domain. If you want to make the endpoints public accesible, just go to the ports section in VsCode, right click on them and change the visibility to public.</p>"},{"location":"codespaces/#5-troubleshooting","title":"5. Troubleshooting","text":"<p>If there is an issue with the application, we recommend you verify the health of the Kind cluster. </p> <p><pre><code>kubectl cluster-info\n</code></pre> The CLI Tool <code>k9s</code> is installed in your dev.container, this will help you navigate in your cluster, just type:</p> <pre><code>k9s\n</code></pre> <p>There is a helper function loaded in the shell to see the open ports in the dev.container. <pre><code>showOpenPorts(){\n  sudo netstat -tulnp\n}\n</code></pre></p> <p>The todoApp is already exposed via NodePort in the port 30100, if you want to expose it in another port like the one defined 8080 in the service, then type and to expose the TODO app, type <code>exposeTodoApp</code>,  <pre><code>exposeTodoApp(){\n  printInfo \"Exposing Todo App in your dev.container\"\n  nohup kubectl port-forward service/todoapp 8080:8080  -n todoapp --address=\"0.0.0.0\" &gt; /tmp/kubectl-port-forward.log 2&gt;&amp;1 &amp;\n}\n</code></pre></p> <ul> <li>Let's Find Some Bugs</li> </ul>"},{"location":"getting-started/","title":"2. Getting started","text":"<p>Requirements</p> <ul> <li>A Grail enabled Dynatrace SaaS Tenant (sign up here).</li> <li>A GitHub account to interact with the demo repository.</li> </ul>"},{"location":"getting-started/#1-dynatrace-tenant-setup","title":"1. Dynatrace Tenant Setup","text":"<p>You will need a Dynatrace SaaS tenant with a DPS pricing model and the 'Code Monitoring' rate card should be associated with it. To validate go to Account Management &gt; Subscription &gt; Overview in your tenant. Code monitoring should be listed in the capability table.</p> <p>In addition the application needs to be monitored with Dynatrace FullStack mode. This is done for you in this example.</p> <p>The Live Debugger currently supports application runtimes: Java, NodeJS. </p>"},{"location":"getting-started/#11-enable-observability-for-developers","title":"1.1 Enable Observability for Developers","text":"<ul> <li>Go to Settings &gt; General monitoring settings &gt; OneAgent features.<ul> <li>Enable the Java Live-Debugger and Node.js Live-Debugger</li> </ul> </li> <li>Go to Settings &gt; Observability for Developers &gt; Enable Observability for Developers</li> </ul> <p>More information can be found here</p>"},{"location":"getting-started/#12-set-iam-policies","title":"1.2 Set IAM Policies","text":"<p>We take security very seriously. So let's create a policy to set user-level Live Debugging breakpoints. </p> <p>We need two policies for your user to be able to set breakpoints and to read snapshots.  For this we go to **Account Management &gt; Identity &amp; Access management &gt; Policy Management &gt; Create Policy **</p> <p>Set breakpoints <pre><code>ALLOW dev-obs:breakpoints:set;\n</code></pre> Read Snapshopts <pre><code>ALLOW storage:application.snapshots:read;\nALLOW storage:buckets:read WHERE storage:table-name = \"application.snapshots\";\n</code></pre></p> <p>For managing snapshots, setting for Admins. <pre><code>ALLOW dev-obs:breakpoints:manage;\n</code></pre></p> <p>The policy should look something like this:</p> <p></p> <p>More info here about the IAM Policies here Then we bind it to a user group. In this case since we are admins, let's bind the policy to the Admin group. Notice that the created policy is for an Admin and also for a Developer. Since we allow to <code>read</code> and <code>set</code> breakpoints but also to <code>manage</code> breakpoints which is explained here.</p> <p>Go to Identify &amp; Access Management &gt; Group Management &gt; Create Group</p> <p>Name the Group 'Live Debugger User' and click Create</p> <p>In the Live Debugger group click + Permission and add the Policy we just created.</p> <p>Finally ensure your user is part of the Live Debugger User group. Go to Identity &amp; Access Management &gt; User Management and find your user. Click on the three dots to the right and select Edit User. Ensure the group for 'Live Debugger User' is selected and Save.</p> <p>Like this you have the fine control to give your developers, SRE teams and whoever you want to set breakpoints and read the snapshots. For more granular access please continue reading here </p>"},{"location":"getting-started/#13-enable-live-debugger-activegate-module","title":"1.3 Enable Live Debugger ActiveGate module","text":"<p>Now we need to enable the Live Debugger ActiveGate module:</p> <p><pre><code>#Set debugging_enabled to true in the custom.properties file.\nactiveGate:\n    customProperties:\n      value: |\n        [debugging]\n        debugging_enabled = true\n</code></pre> This is already set up for you in the codespaces automatically in the Dynakube.yaml file so no need to restart the ActiveGate.</p>"},{"location":"getting-started/#14-enable-log-ingest","title":"1.4 Enable Log Ingest","text":"<p>You have (2) options:</p> <ul> <li>Configure log ingest rule to ingest relevant logs for this lab</li> <li>Enable built-in log ingest rule to ingest all logs discovered by Dynatrace (Be careful with this in practice)</li> </ul> <p>In your Dynatrace tenant, open the <code>Settings</code> App.  Navigate in the menus to <code>Collect and capture</code> &gt; <code>Log monitoring</code> &gt; <code>Log ingest rules</code>.  This will open the <code>Settings Classic</code> App and show you the Log ingest rules</p> <p></p> <p>Ingest relevant logs</p> <p></p> <p>Click on <code>Add rule</code> to create a new Rule.  Configure the Rule:</p> <p>Rule name: <pre><code>TODO App Logs\n</code></pre></p> <p>Rule type: <pre><code>Include in storage\n</code></pre></p> <p>Conditions: <pre><code>Kubernetes namespace name = todoapp\n</code></pre></p> <p>Click on <code>Save changes</code>.</p> <p>Ingest all logs</p> <p>Locate the rule <code>[Built-in] Ingest all logs</code> and enable it.  Click <code>Save changes</code>.</p>"},{"location":"getting-started/#2-create-dynatrace-api-tokens-for-kubernetes-observability","title":"2. Create Dynatrace API Tokens for Kubernetes Observability","text":"<p>This codespace has everything automated for you so you can focus on what matters which in this enablement is to learn about the Live Debugging capabilities of the Dynatrace Platform.  You'll need two tokens:</p> <ol> <li>Operator Token</li> <li>Ingest Token </li> </ol> <p>We will get these two from the Kubernetes App. </p>"},{"location":"getting-started/#21-get-the-operator-token-and-the-ingest-token-from-the-kubernetes-app","title":"2.1. Get the Operator Token and the Ingest Token from the Kubernetes App","text":"<ol> <li>Open the Kubernetes App (CTRL + K then type Kubernetes for fast access)</li> <li>Select the + Add cluster button</li> <li>Scroll down to the section Install Dynatrace Operator </li> <li>Click on generate Token for the 'Dynatrace Operator' and save it to your Notepad</li> <li>Click on generate Token for the 'Data Ingest Token' and save it to your Notepad</li> <li>You can close the Kubernetes App, we don't need it, we just needed the tokens.</li> </ol> <p>Let's launch the Codespace</p> <p>Now we are ready to launch the Codespace! You'll need your tenant and the two tokens previuosly gathered from above. When you enter the tenant please enter it without the 'apps' part, for production tenants eg. abc12345 for live -&gt; https://abc12345.live.dynatrace.com and for sprint -&gt; https://abc12345.sprint.dynatracelabs.com no apps in the URL.</p> <ul> <li>Let's launch Codespaces</li> </ul>"},{"location":"snippets/admonitions/","title":"Admonitions","text":"<p>Note</p> <p>This is a Note </p> <p>Abstract</p> <p>This is an abstract</p> <p>Tipp</p> <p>This is a tipp </p> <p>Success</p> <p>This is a success </p> <p>Question</p> <p>This is a success </p> <p>Failure</p> <p>This is a failure </p> <p>Danger</p> <p>This is a danger </p> <p>Info</p> <p>This is a info</p> <p>Warning</p> <p>This is a Warning </p> <p>This is an Example admonition</p> <p>This is an example</p> This is a bug and is collapsable <p>This is a bug</p>"},{"location":"snippets/disclaimer/","title":"Disclaimer","text":"<p>Support Policy</p> <p>This is an enablement project created by the DevRel Team at Dynatrace</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"snippets/grail-requirements/","title":"Grail requirements","text":"<p>Requirements</p> <ul> <li>A Grail enabled Dynatrace SaaS Tenant (sign up here).</li> <li>A GitHub account to interact with the demo repository.</li> </ul>"},{"location":"snippets/view-code/","title":"View code","text":"<p>View the Code</p> <p>The code for this repository is hosted on GitHub. Click the \"View Code on GitHub\" link above.</p>"}]}